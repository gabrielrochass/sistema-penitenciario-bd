
CREATE OR REPLACE TYPE TELEFONES_VARRAY AS VARRAY(3) OF VARCHAR2(15);
/

-- ENDEREÇO COM VARRAY
CREATE OR REPLACE TYPE TP_ENDERECO AS OBJECT (
    CEP VARCHAR2(8),
    RUA VARCHAR2(30),
    NUMERO NUMBER,
    BAIRRO VARCHAR2(20),
    TELEFONES TELEFONES_VARRAY, -- Adicionando um VARRAY de telefones

    CONSTRUCTOR FUNCTION TP_ENDERECO(SELF IN OUT NOCOPY TP_ENDERECO, CEP VARCHAR2, RUA VARCHAR2, NUMERO NUMBER, BAIRRO VARCHAR2, TELEFONES TELEFONES_VARRAY) RETURN SELF AS RESULT
);
/

CREATE OR REPLACE TYPE BODY TP_ENDERECO AS
    CONSTRUCTOR FUNCTION TP_ENDERECO(SELF IN OUT TP_ENDERECO, CEP VARCHAR2, RUA VARCHAR2, NUMERO NUMBER, BAIRRO VARCHAR2, TELEFONES TELEFONES_VARRAY) RETURN SELF AS RESULT IS
        BEGIN
            SELF.CEP := CEP;
            SELF.RUA := RUA;
            SELF.NUMERO := NUMERO;
            SELF.BAIRRO := BAIRRO;
            SELF.TELEFONES := TELEFONES;
            RETURN SELF;
        END;
END;
/

-- FUNCIONÁRIO COM NESTED TABLE E ORDER MEMBER FUNCTION
CREATE OR REPLACE TYPE TELEFONES_NESTED AS TABLE OF VARCHAR2(15);
/

CREATE OR REPLACE TYPE TP_FUNCIONARIO AS OBJECT (
    CPF VARCHAR2(11),
    NOME VARCHAR2(50),
    DATA_NASC DATE,
    SEXO CHAR(1),
    DATA_ADM DATE,
    ENDERECO TP_ENDERECO,
    SALARIO NUMBER,
    TELEFONES TELEFONES_NESTED, -- Adicionando uma nested table de telefones

    -- Definindo uma ORDER MEMBER FUNCTION para comparação
    ORDER MEMBER FUNCTION compare_to(SELF IN TP_FUNCIONARIO, outro TP_FUNCIONARIO) RETURN INTEGER,

    CONSTRUCTOR FUNCTION TP_FUNCIONARIO(SELF IN OUT NOCOPY TP_FUNCIONARIO, CPF VARCHAR2, NOME VARCHAR2, DATA_NASC DATE, SEXO CHAR, DATA_ADM DATE, ENDERECO TP_ENDERECO, SALARIO NUMBER) RETURN SELF AS RESULT
) NOT FINAL NOT INSTANTIABLE;
/

CREATE OR REPLACE TYPE BODY TP_FUNCIONARIO AS
    -- Implementação do construtor
    CONSTRUCTOR FUNCTION TP_FUNCIONARIO(SELF IN OUT TP_FUNCIONARIO, CPF VARCHAR2, NOME VARCHAR2, DATA_NASC DATE, SEXO CHAR, DATA_ADM DATE, ENDERECO TP_ENDERECO, SALARIO NUMBER) RETURN SELF AS RESULT IS
    BEGIN
        SELF.CPF := CPF;
        SELF.NOME := NOME;
        SELF.DATA_NASC := DATA_NASC;
        SELF.SEXO := SEXO;
        SELF.DATA_ADM := DATA_ADM;
        SELF.ENDERECO := ENDERECO;
        SELF.SALARIO := SALARIO;
        RETURN SELF;
    END;

    -- Implementação da ORDER MEMBER FUNCTION
    ORDER MEMBER FUNCTION compare_to(SELF IN TP_FUNCIONARIO, outro TP_FUNCIONARIO) RETURN INTEGER IS
    BEGIN
        IF SELF.SALARIO > outro.SALARIO THEN
            RETURN 1;
        ELSIF SELF.SALARIO < outro.SALARIO THEN
            RETURN -1;
        ELSE
            RETURN 0;
        END IF;
    END;
END;
/

-- DIRETOR COM OVERRIDING E FINAL MEMBER
CREATE OR REPLACE TYPE TP_DIRETOR UNDER TP_FUNCIONARIO (
    DATA_INICIO DATE,

    -- Sobrescrevendo a função de comparação
    OVERRIDING MEMBER FUNCTION compare_to(SELF IN TP_DIRETOR, outro TP_FUNCIONARIO) RETURN INTEGER,

    FINAL MEMBER FUNCTION obter_diretor_info RETURN VARCHAR2 -- Função final, não pode ser sobrescrita
);
/

CREATE OR REPLACE TYPE BODY TP_DIRETOR AS
    -- Implementação da função de comparação
    OVERRIDING MEMBER FUNCTION compare_to(SELF IN TP_DIRETOR, outro TP_FUNCIONARIO) RETURN INTEGER IS
    BEGIN
        RETURN SELF.DATA_INICIO - outro.DATA_ADM;
    END;

    -- Implementação da função final
    FINAL MEMBER FUNCTION obter_diretor_info RETURN VARCHAR2 IS
    BEGIN
        RETURN 'Diretor: ' || SELF.NOME || ', Data de Início: ' || TO_CHAR(SELF.DATA_INICIO, 'DD-MM-YYYY');
    END;
END;
/

-- GUARDA 
CREATE OR REPLACE TYPE TP_GUARDA UNDER TP_FUNCIONARIO (
    TURNO VARCHAR2(5),
    SUPERVISOR REF TP_GUARDA,

   CONSTRUCTOR FUNCTION TP_GUARDA(SELF IN OUT NOCOPY TP_GUARDA, TURNO VARCHAR2, SUPERVISOR REF TP_GUARDA) RETURN SELF AS RESULT
);
/

CREATE OR REPLACE TYPE BODY TP_GUARDA AS
    CONSTRUCTOR FUNCTION TP_GUARDA(SELF IN OUT NOCOPY TP_GUARDA, TURNO VARCHAR2, SUPERVISOR REF TP_GUARDA) RETURN SELF AS RESULT IS
        BEGIN
            SELF.TURNO := TURNO;
            SELF.SUPERVISOR := SUPERVISOR;
            RETURN SELF;
        END;
END;
/

-- SUPERINTENDENTE (HERANÇA DO FUNCIONÁRIO)
CREATE OR REPLACE TYPE TP_SUPERINTENDENTE UNDER TP_FUNCIONARIO (
    BONIFICACAO NUMBER, -- Bonificação do superintendente
    DIRETOR REF TP_DIRETOR, -- Referência ao Diretor

    -- Construtor
    CONSTRUCTOR FUNCTION TP_SUPERINTENDENTE(
        SELF IN OUT NOCOPY TP_SUPERINTENDENTE,
        CPF VARCHAR2,
        NOME VARCHAR2,
        DATA_NASC DATE,
        SEXO CHAR,
        DATA_ADM DATE,
        ENDERECO TP_ENDERECO,
        SALARIO NUMBER,
        BONIFICACAO NUMBER,
        DIRETOR REF TP_DIRETOR
    ) RETURN SELF AS RESULT
);
/

-- IMPLEMENTAÇÃO DO CONSTRUTOR DO OBJETO SUPERINTENDENTE
CREATE OR REPLACE TYPE BODY TP_SUPERINTENDENTE AS
    -- Implementação do construtor
    CONSTRUCTOR FUNCTION TP_SUPERINTENDENTE(
        SELF IN OUT NOCOPY TP_SUPERINTENDENTE,
        CPF VARCHAR2,
        NOME VARCHAR2,
        DATA_NASC DATE,
        SEXO CHAR,
        DATA_ADM DATE,
        ENDERECO TP_ENDERECO,
        SALARIO NUMBER,
        BONIFICACAO NUMBER,
        DIRETOR REF TP_DIRETOR
    ) RETURN SELF AS RESULT IS
    BEGIN
        SELF.CPF := CPF;
        SELF.NOME := NOME;
        SELF.DATA_NASC := DATA_NASC;
        SELF.SEXO := SEXO;
        SELF.DATA_ADM := DATA_ADM;
        SELF.ENDERECO := ENDERECO;
        SELF.SALARIO := SALARIO;
        SELF.BONIFICACAO := BONIFICACAO;
        SELF.DIRETOR := DIRETOR;
        RETURN SELF;
    END;
END;
/


-- ALA COM VARRAY E NESTED TABLE
CREATE OR REPLACE TYPE LISTA_DE_CELAS AS VARRAY(100) OF NUMBER;
/

CREATE OR REPLACE TYPE TP_ALA AS OBJECT (
    ID NUMBER,
    TIPO VARCHAR2(10),
    CAPACIDADE NUMBER,
    CELAS LISTA_DE_CELAS, -- VARRAY para armazenar celas

    CONSTRUCTOR FUNCTION TP_ALA(SELF IN OUT NOCOPY TP_ALA, ID NUMBER, TIPO VARCHAR2, CAPACIDADE NUMBER, CELAS LISTA_DE_CELAS) RETURN SELF AS RESULT
);
/

CREATE OR REPLACE TYPE BODY TP_ALA AS
    -- Implementação do construtor
    CONSTRUCTOR FUNCTION TP_ALA(SELF IN OUT TP_ALA, ID NUMBER, TIPO VARCHAR2, CAPACIDADE NUMBER, CELAS LISTA_DE_CELAS) RETURN SELF AS RESULT IS
    BEGIN
        SELF.ID := ID;
        SELF.TIPO := TIPO;
        SELF.CAPACIDADE := CAPACIDADE;
        SELF.CELAS := CELAS;
        RETURN SELF;
    END;
END;
/


CREATE OR REPLACE TYPE TP_DETENTO AS OBJECT (
    CPF VARCHAR2(11),
    NOME VARCHAR2(30),
    DATA_NASC DATE,
    SEXO CHAR(1),
    DATA_ENT DATE,
    COMPORTAMENTO VARCHAR2(30),

    -- Construtor
    CONSTRUCTOR FUNCTION TP_DETENTO(
        SELF IN OUT NOCOPY TP_DETENTO,
        CPF VARCHAR2,
        NOME VARCHAR2,
        DATA_NASC DATE,
        SEXO CHAR,
        DATA_ENT DATE,
        COMPORTAMENTO VARCHAR2
    ) RETURN SELF AS RESULT,

    -- Procedure
    MEMBER PROCEDURE atualizar_comportamento(novo_comportamento VARCHAR2)
);
/

CREATE OR REPLACE TYPE BODY TP_DETENTO AS
    CONSTRUCTOR FUNCTION TP_DETENTO(
        SELF IN OUT NOCOPY TP_DETENTO,
        CPF VARCHAR2,
        NOME VARCHAR2,
        DATA_NASC DATE,
        SEXO CHAR,
        DATA_ENT DATE,
        COMPORTAMENTO VARCHAR2
    ) RETURN SELF AS RESULT IS
    BEGIN
        SELF.CPF := CPF;
        SELF.NOME := NOME;
        SELF.DATA_NASC := DATA_NASC;
        SELF.SEXO := SEXO;
        SELF.DATA_ENT := DATA_ENT;
        SELF.COMPORTAMENTO := COMPORTAMENTO;
        RETURN SELF;
    END;

    -- Implementação da PROCEDURE
    MEMBER PROCEDURE atualizar_comportamento(novo_comportamento VARCHAR2) IS
    BEGIN
        SELF.COMPORTAMENTO := novo_comportamento;
    END;
END;
/





-- VISITA COM REFERÊNCIAS E SCOPE IS
CREATE OR REPLACE TYPE TP_VISITA AS OBJECT (
    DETENTO REF TP_DETENTO,
    MOTIVO_VISITA VARCHAR2(20),
    DATA_HORA DATE,

    CONSTRUCTOR FUNCTION TP_VISITA(SELF IN OUT NOCOPY TP_VISITA, DETENTO REF TP_DETENTO, MOTIVO_VISITA VARCHAR2, DATA_HORA DATE) RETURN SELF AS RESULT
);
/

    
-- CELA
CREATE OR REPLACE TYPE TP_CELA AS OBJECT (
    ID NUMBER,
    TIPO VARCHAR2(10),
    SEGURANCA VARCHAR2(10),

    CONSTRUCTOR FUNCTION TP_CELA(
        SELF IN OUT NOCOPY TP_CELA,
        ID NUMBER,
        TIPO VARCHAR2,
        SEGURANCA VARCHAR2
    ) RETURN SELF AS RESULT
);
/

CREATE OR REPLACE TYPE BODY TP_CELA AS
    CONSTRUCTOR FUNCTION TP_CELA(
        SELF IN OUT NOCOPY TP_CELA,
        ID NUMBER,
        TIPO VARCHAR2,
        SEGURANCA VARCHAR2
    ) RETURN SELF AS RESULT IS
    BEGIN
        SELF.ID := ID;
        SELF.TIPO := TIPO;
        SELF.SEGURANCA := SEGURANCA;
        RETURN SELF;
    END;
END;
/
    
-- Possui (com referenciamento)
CREATE OR REPLACE TYPE TP_POSSUI AS OBJECT (
    DETENTO REF TP_DETENTO,
    ALA REF TP_ALA,
    CELA REF TP_CELA,

    CONSTRUCTOR FUNCTION TP_POSSUI(SELF IN OUT NOCOPY TP_POSSUI, DETENTO REF TP_DETENTO, ALA REF TP_ALA, CELA REF TP_CELA) RETURN SELF AS RESULT
);
/

CREATE OR REPLACE TYPE BODY TP_POSSUI AS
    -- Implementação do construtor
    CONSTRUCTOR FUNCTION TP_POSSUI(SELF IN OUT TP_POSSUI, DETENTO REF TP_DETENTO, ALA REF TP_ALA, CELA REF TP_CELA) RETURN SELF AS RESULT IS
    BEGIN
        SELF.DETENTO := DETENTO;
        SELF.ALA := ALA;
        SELF.CELA := CELA;
        RETURN SELF;
    END;
END;
/

ALTER TYPE TP_CELA ADD ATTRIBUTE (CORREDOR NUMBER(1)) CASCADE;
/
ALTER TYPE TP_CELA DROP ATTRIBUTE CORREDOR CASCADE;
/

-- TIPO_CELA
CREATE OR REPLACE TYPE TP_TIPO_CELA AS OBJECT (
    TIPO_CELA VARCHAR2(30),
    CAPACIDADE NUMBER,

    -- Construtor
    CONSTRUCTOR FUNCTION TP_TIPO_CELA(
        SELF IN OUT NOCOPY TP_TIPO_CELA,
        TIPO_CELA VARCHAR2,
        CAPACIDADE NUMBER
    ) RETURN SELF AS RESULT
);
/


CREATE OR REPLACE TYPE BODY TP_TIPO_CELA AS
    -- Implementação do construtor
    CONSTRUCTOR FUNCTION TP_TIPO_CELA(SELF IN OUT NOCOPY TP_TIPO_CELA, TIPO_CELA VARCHAR2, CAPACIDADE NUMBER) RETURN SELF AS RESULT IS
    BEGIN
        SELF.TIPO_CELA := TIPO_CELA;
        SELF.CAPACIDADE := CAPACIDADE;
        RETURN SELF;
    END;
END;
/

    
-- SALA
CREATE OR REPLACE TYPE TP_SALA AS OBJECT (
    ID NUMBER,

    -- Construtor
    CONSTRUCTOR FUNCTION TP_SALA(
        SELF IN OUT NOCOPY TP_SALA,
        ID NUMBER
    ) RETURN SELF AS RESULT
);
/

CREATE OR REPLACE TYPE BODY TP_SALA AS
    CONSTRUCTOR FUNCTION TP_SALA(
        SELF IN OUT NOCOPY TP_SALA,
        ID NUMBER
    ) RETURN SELF AS RESULT IS
    BEGIN
        SELF.ID := ID;
        RETURN SELF;
    END;
END;
/


-- VISITANTE
CREATE OR REPLACE TYPE TP_VISITANTE AS OBJECT (
    CPF VARCHAR2(11),
    NOME VARCHAR2(50),
    DATA_NASC DATE,
    SEXO CHAR(1),

    -- Construtor
    CONSTRUCTOR FUNCTION TP_VISITANTE(
        SELF IN OUT NOCOPY TP_VISITANTE,
        CPF VARCHAR2,
        NOME VARCHAR2,
        DATA_NASC DATE,
        SEXO CHAR
    ) RETURN SELF AS RESULT
);
/

CREATE OR REPLACE TYPE BODY TP_VISITANTE AS
    CONSTRUCTOR FUNCTION TP_VISITANTE(
        SELF IN OUT NOCOPY TP_VISITANTE,
        CPF VARCHAR2,
        NOME VARCHAR2,
        DATA_NASC DATE,
        SEXO CHAR
    ) RETURN SELF AS RESULT IS
    BEGIN
        SELF.CPF := CPF;
        SELF.NOME := NOME;
        SELF.DATA_NASC := DATA_NASC;
        SELF.SEXO := SEXO;
        RETURN SELF;
    END;
END;
/

-- ENTRADA
CREATE OR REPLACE TYPE TP_ENTRADA AS OBJECT (
    DETENTO REF TP_DETENTO,
    VISITANTE REF TP_VISITANTE,
    DATA_HORA DATE,

    CONSTRUCTOR FUNCTION TP_ENTRADA(
        SELF IN OUT NOCOPY TP_ENTRADA,
        DETENTO REF TP_DETENTO,
        VISITANTE REF TP_VISITANTE,
        DATA_HORA DATE
    ) RETURN SELF AS RESULT
);
/

CREATE OR REPLACE TYPE BODY TP_ENTRADA AS
    CONSTRUCTOR FUNCTION TP_ENTRADA(
        SELF IN OUT NOCOPY TP_ENTRADA,
        DETENTO REF TP_DETENTO,
        VISITANTE REF TP_VISITANTE,
        DATA_HORA DATE
    ) RETURN SELF AS RESULT IS
    BEGIN
        SELF.DETENTO := DETENTO;
        SELF.VISITANTE := VISITANTE;
        SELF.DATA_HORA := DATA_HORA;
        RETURN SELF;
    END;
END;
/

--LOCAL
CREATE OR REPLACE TYPE TP_LOCAL AS OBJECT (
    DATA_HORA DATE,
    SALA REF TP_SALA,

    -- Construtor
    CONSTRUCTOR FUNCTION TP_LOCAL(
        SELF IN OUT NOCOPY TP_LOCAL,
        DATA_HORA DATE,
        SALA REF TP_SALA
    ) RETURN SELF AS RESULT
);
/

CREATE OR REPLACE TYPE BODY TP_LOCAL AS
    CONSTRUCTOR FUNCTION TP_LOCAL(
        SELF IN OUT NOCOPY TP_LOCAL,
        DATA_HORA DATE,
        SALA REF TP_SALA
    ) RETURN SELF AS RESULT IS
    BEGIN
        SELF.DATA_HORA := DATA_HORA;
        SELF.SALA := SALA;
        RETURN SELF;
    END;
END;
/

-- CRIME
CREATE OR REPLACE TYPE TP_CRIME AS OBJECT (
    ID_CRIME NUMBER,
    DETENTO REF TP_DETENTO,
    VISITANTE REF TP_VISITANTE,
    DURACAO NUMBER,

    -- Construtor
    CONSTRUCTOR FUNCTION TP_CRIME(
        SELF IN OUT NOCOPY TP_CRIME,
        ID_CRIME NUMBER,
        DETENTO REF TP_DETENTO,
        VISITANTE REF TP_VISITANTE,
        DURACAO NUMBER
    ) RETURN SELF AS RESULT
);
/

CREATE OR REPLACE TYPE BODY TP_CRIME AS
    CONSTRUCTOR FUNCTION TP_CRIME(
        SELF IN OUT NOCOPY TP_CRIME,
        ID_CRIME NUMBER,
        DETENTO REF TP_DETENTO,
        VISITANTE REF TP_VISITANTE,
        DURACAO NUMBER
    ) RETURN SELF AS RESULT IS
    BEGIN
        SELF.ID_CRIME := ID_CRIME;
        SELF.DETENTO := DETENTO;
        SELF.VISITANTE := VISITANTE;
        SELF.DURACAO := DURACAO;
        RETURN SELF;
    END;
END;
/

-- SENTENÇA
CREATE OR REPLACE TYPE TP_SENTENCA AS OBJECT (
    DETENTO REF TP_DETENTO,
    CRIME REF TP_CRIME,
    DURACAO NUMBER,

    -- Adicionar construtor se necessário
    CONSTRUCTOR FUNCTION TP_SENTENCA(
        SELF IN OUT NOCOPY TP_SENTENCA,
        DETENTO REF TP_DETENTO,
        CRIME REF TP_CRIME,
        DURACAO NUMBER
    ) RETURN SELF AS RESULT
);
/

CREATE OR REPLACE TYPE BODY TP_SENTENCA AS
    CONSTRUCTOR FUNCTION TP_SENTENCA(
        SELF IN OUT NOCOPY TP_SENTENCA,
        DETENTO REF TP_DETENTO,
        CRIME REF TP_CRIME,
        DURACAO NUMBER
    ) RETURN SELF AS RESULT IS
    BEGIN
        SELF.DETENTO := DETENTO;
        SELF.CRIME := CRIME;
        SELF.DURACAO := DURACAO;
        RETURN SELF;
    END;
END;
/
